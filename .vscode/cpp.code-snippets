{
	// Place your cpp ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Cppのテンプレート": {
		"prefix": "cpptemp",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"/* ループ処理 0からnまで*/",
			"#define rep(i, n) for (int i = 0; i < (int)(n); i++)",
			"/* ループ処理 aからbまで */",
			"#define rep2(i, a, b) for (int i = (a); i < (int)(b); i++)",
			"/* イテレータ簡略化 */",
			"#define all(obj) (obj).begin(), (obj).end()",
			"template <class... T>",
			"/* 入力 */",
			"void in(T &...a)",
			"{",
			"  (cin >> ... >> a);",
			"}",
			"template <class T, class... Ts>",
			"/* 出力 */",
			"void out(const T &a, const Ts &...b)",
			"{",
			"  cout << a;",
			"  (cout << ... << (cout << ' ', b));",
			"  cout << '\\n';",
			"}",
			"/* long long */",
			"#define int long long",
			"// vector出力",
			"template <typename T>",
			"ostream &operator<<(ostream &os, vector<T> &vec)",
			"{",
			"  os << \"{\";",
			"  for (int i = 0; i < vec.size(); i++)",
			"  {",
			"    os << vec[i] << (i + 1 == vec.size() ? \"\" : \", \");",
			"  }",
			"  os << \"}\";",
			"  return os;",
			"}",
			"",
			"signed main()",
			"{",
			"",
			"  return 0;",
			"}"
		],
		"description": "Cppのテンプレート"
	},
	"vectorのfind": {
		"prefix": "find",
		"body": [
			"// イテレータ",
			"auto itr = find(all(), );",
			"// 値",
			"auto val = *itr;",
			"// index",
			"auto index = distance(.begin(), itr);"
		],
		"description": "vectorのfind"
	}
}
